import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.TextArea;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Vector;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;



public class GridLayoutManager extends JFrame {
	private Container contents ;
	private String  Emplacement ;
	private ConfigurationModel configuration ;
	
	//Components :
	private JButton [][] squares; 
	
	// images :
	private ImageIcon image;
	public GridLayoutManager(ConfigurationModel configuration)
	{
		super("Structure");
		//injection :
		this.Emplacement="";
		this.configuration=configuration;
		image= new ImageIcon ("resources\\obstacle.png");
		// creer une grille de button vide 
		Create();
		// mettre les obstacles au bord de la grille (mur)
		for (int i = 0; i < configuration.nbre_ligne; i++) {
			EmplacementAjout (new Point(i,0) , "Obstacle");
			EmplacementAjout (new Point(i,configuration.nbre_colonne-1) , "Obstacle");
			squares[i][0].setIcon(image);
			squares[i][configuration.nbre_colonne-1].setIcon(image);
		}
		for (int i = 1; i < configuration.nbre_colonne-1; i++) {
			EmplacementAjout (new Point(0,i) , "Obstacle");
			EmplacementAjout (new Point(configuration.nbre_ligne-1,i) , "Obstacle");
			squares[0][i].setIcon(image);
			squares[configuration.nbre_ligne-1][i].setIcon(image);
		}
		image=null;
	}
	
	private void Create ()
	{
		//Create event handlers:
				ButtonHandler buttonHandler = new ButtonHandler();
				contents = getContentPane();
				contents.setLayout(new GridLayout(configuration.nbre_ligne,configuration.nbre_colonne));
				squares = new JButton[configuration.nbre_ligne][configuration.nbre_colonne];
				for (int i = 0 ; i < configuration.nbre_ligne ; i++)
				{
					for (int j = 0 ; j < configuration.nbre_colonne ; j++)
					{
						squares [i][j]= new JButton();
						squares[i][j].addActionListener(buttonHandler);
						contents.add(squares[i][j]);
					}
				}
				
		
		//size and display window:
		setSize(40*configuration.nbre_colonne,40*configuration.nbre_ligne);
		setResizable(false);
		setLocationRelativeTo(null);
		setVisible(false);
		
	}
	// on ajoute un emplacement en cliquant sur un button ( une case de la grille )
	private class ButtonHandler implements ActionListener
	{		
		public void actionPerformed (ActionEvent e)
		{
			Object source = e.getSource();
			
			for (int i = 0 ; i < configuration.nbre_ligne ; i++)
			{
				for (int j = 0 ; j < configuration.nbre_colonne ; j++)
				{
					if (source == squares[i][j])
					{
						image = (ImageIcon) squares[i][j].getIcon();
						Point point = new Point(i,j);
						boolean contains = (configuration.Emplac_Obstacle.contains(point) || configuration.Emplac_Sac.contains(point) 
								|| configuration.Emplac_Sortie.contains(point) || configuration.Emplac_Robots.contains(point) 
								|| configuration.Emplac_Intrus.contains(point));
						if (contains) {
							supprimeEmplacement(point, Emplacement);
						}
						else {
							EmplacementAjout(point, Emplacement);
						}
						
						squares[i][j].setIcon(image);
					}
				}
			}
		}

		
	}
	private void supprimeEmplacement(Point p,String Emplacement)
	{
		switch (Emplacement)
		{
		case "Obstacle":
			if (configuration.Emplac_Obstacle.remove(p)) {
				image= null;
			}else {
				JOptionPane.showMessageDialog(null, "L'emplacement choisi existe déja ! ");
			}
			break;
			
		case "Sac":
			if (configuration.Emplac_Sac.remove(p)) {
				image= null;
			}else {
				JOptionPane.showMessageDialog(null, "L'emplacement choisi existe déja ! ");
			}
			break;							
		case "Robots":
			int indexFreqr = configuration.Emplac_Robots.indexOf(p);
			if (configuration.Emplac_Robots.remove(p)) {
				configuration.freq_Robots.remove(indexFreqr);
				image = null;
			}else {
				JOptionPane.showMessageDialog(null, "L'emplacement choisi existe déja ! ");
			}
			break;

		case "Intrus":
			int indexFreqi = configuration.Emplac_Intrus.indexOf(p);
			if (configuration.Emplac_Intrus.remove(p)) {
				configuration.freq_Intrus.remove(indexFreqi);
				image = null;
			}else {
				JOptionPane.showMessageDialog(null, "L'emplacement choisi existe déja ! ");
			}
			break;
		case "Sortie":
			image = null;
			if (p.x ==0 || p.x == (configuration.nbre_ligne-1) || p.y == 0 || p.y == (configuration.nbre_colonne-1))
			{
				image= new ImageIcon ("resources\\exit.png");
				if (configuration.Emplac_Obstacle.remove(p)) {
					configuration.Emplac_Sortie.add(p);
				}
				
				
			}else			JOptionPane.showMessageDialog(null, "Une sortie doit être au bord de la grille  !");break;
		}		
	}	
	private void EmplacementAjout (Point p , String Emplacement) {
			switch (Emplacement)
			{
			case "Obstacle":
				image= new ImageIcon ("resources\\obstacle.png");
				configuration.Emplac_Obstacle.add(p);break;
			case "Sac":
				image= new ImageIcon ("resources\\sac.png");
				configuration.Emplac_Sac.add(p);break;							
			case "Robots":
				image = null;
				if (configuration.Emplac_Robots.size() <4)
				{
					image= new ImageIcon ("resources\\robot.png");

					configuration.Emplac_Robots.add(p);
					Frequence frequence = new Frequence(configuration.freq_Robots);
					break;
					
				}else JOptionPane.showMessageDialog(null, "Le nombre de robots ne dépasse pas 4 !");break;
				
			case "Intrus":
				image = null;
				if (configuration.Emplac_Intrus.size() <4)
				{
					image= new ImageIcon ("resources\\intrus.png");
					configuration.Emplac_Intrus.add(p);
					Frequence frequence = new Frequence(configuration.freq_Intrus);
					break;
				}else JOptionPane.showMessageDialog(null, "Le nombre d'intrus ne dépasse pas 4 !");break;
			default: break;
				
				
		}
		
	}
	public  void SetEmplacement (String emplacement)
	{
		this.Emplacement=emplacement;
	}
	private class Frequence extends JFrame {
		  private JPanel container = new JPanel();
		  private JTextField jtf = new JTextField("1");
		  private JLabel label = new JLabel("Frequence (cases/seconds) ");
		  private int freq;

		  public Frequence(Vector <Integer> freqs){
		  	addWindowListener(new WindowAdapter() {
		  		@Override
		  		public void windowClosing(WindowEvent e) {
		  			freq=Integer.parseInt(jtf.getText());
		  			freqs.add(freq);
		  		}
		  	});
		    this.setTitle("Frequence");
		    this.setSize(200, 77);
		    this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		    this.setLocationRelativeTo(null);
		    container.setBackground(Color.white);
		    container.setLayout(new BorderLayout());
		    JPanel top = new JPanel();
		    Font police = new Font("Arial", Font.BOLD, 14);
		    jtf.setFont(police);
		    jtf.setPreferredSize(new Dimension(50, 30));
		    jtf.setForeground(Color.BLUE);
		    top.add(label);
		    top.add(jtf);
		    container.add(top, BorderLayout.NORTH);
		    this.setContentPane(container);
		    this.setVisible(true);            
		  }
		}
	
	
	
}
