import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
public class GrilleView extends JFrame {

	private JPanel contentPane;
	int nbre_ligne;int nbre_colonne;
	ConfigurationModel configuration ;
	String Emplacement;
	
	

	/**
	 * Create the frame.
	 */
	public GrilleView(int nbre_ligne,int nbre_colonne,ConfigurationModel configuration) {
		
		this.nbre_ligne=nbre_ligne;
		this.nbre_colonne= nbre_colonne;
		this.configuration=configuration;
		this.Emplacement="";
		
		//System.out.println(nbre_ligne + "  " +nbre_colonne);
		JFrame frame = new JFrame("Grille");
		frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
		frame.setLayout(new BorderLayout());
		frame.add(new TestPane());
		frame.pack();
		frame.setLocationRelativeTo(null);
		frame.setVisible(true);
	}

public GrilleView(int nbre_ligne,int nbre_colonne,ConfigurationModel configuration,String Emplacement) {
		
		this.nbre_ligne=nbre_ligne;
		this.nbre_colonne= nbre_colonne;
		this.configuration=configuration;
		this.Emplacement=Emplacement;
		
		//System.out.println(nbre_ligne + "  " +nbre_colonne);
		JFrame frame = new JFrame("Grille");
		frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
		frame.setLayout(new BorderLayout());
		frame.add(new TestPane());
		frame.pack();
		frame.setLocationRelativeTo(null);
		frame.setVisible(true);
	}
	


	public  class TestPane extends JPanel {
	public int xOffset =0;
	public int yOffset =0;


	private int columnCount = 0;
	private int rowCount = 0;
	private List<Rectangle> cells;
	private Point selectedCell;
	public TestPane() {
		columnCount=nbre_ligne;
		rowCount=nbre_colonne;
	cells = new ArrayList<>(columnCount * rowCount);
	MouseAdapter mouseHandler;
	mouseHandler = new MouseAdapter() {
		@Override
		public void mouseClicked(MouseEvent e) {
				Point point = e.getPoint();
				int width = getWidth();
				int height = getHeight();
				int cellWidth = width / columnCount;
				int cellHeight = height / rowCount;
				selectedCell = null;
				if (e.getX() >= xOffset && e.getY() >= yOffset) {
						int column = (e.getX() - xOffset) / cellWidth;
						int row = (e.getY() - yOffset) / cellHeight;
						if (column >= 0 && row >= 0 && column < columnCount && row < rowCount) {
							selectedCell = new Point(column, row);
							switch (Emplacement)
							{
							case "Obstacle":
								configuration.Emplac_Obstacle.add(new Point(row+1,column+1));break;
								
							}
							//configuration.Emplac_Obstacle.add(new Point(row+1,column+1));
	
	System.out.println(column+1 +"  " + row+1);
							}
					}
				repaint();
			}
		};
			addMouseListener(mouseHandler);
	}
	public void mouseExited(MouseEvent e) {
		selectedCell = null;
		}
	@Override
	public Dimension getPreferredSize() {
		return new Dimension(columnCount*30, rowCount*30);
		}
	@Override
	public void invalidate() {
		cells.clear();
		selectedCell = null;
		super.invalidate();
		}
	@Override
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		Graphics2D g2d = (Graphics2D) g.create();
		int width = getWidth();
		int height = getHeight();
		int cellWidth = width / columnCount;
		int cellHeight = height / rowCount;
		int xOffset = (width - (columnCount * cellWidth)) / 2;
		int yOffset = (height - (rowCount * cellHeight)) / 2;
		if (cells.isEmpty()) {
			for (int row = 0; row < rowCount; row++) {
				for (int col = 0; col < columnCount; col++) {
					Rectangle cell = new Rectangle(
					xOffset + (col * cellWidth),
					yOffset + (row * cellHeight),
					cellWidth,
					cellHeight);
					cells.add(cell);
					}
				}
			}
		if (selectedCell != null) {
			int index = selectedCell.x + (selectedCell.y * columnCount);
			Rectangle cell = cells.get(index);
			g2d.setColor(Color.BLUE);
			g2d.fill(cell);
		}
		g2d.setColor(Color.GRAY);
		for (Rectangle cell : cells) {
			g2d.draw(cell);
			}
		g2d.dispose();
		}
	}
}