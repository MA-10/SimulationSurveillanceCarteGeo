import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

import javax.imageio.ImageIO;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
public class GrilleView extends JFrame {
	private String  Emplacement ; 
	private JPanel contentPane;
	private ConfigurationModel configuration ;
	
	

public GrilleView(ConfigurationModel configuration, String  Emplacement ) {
		this.Emplacement=Emplacement;
		this.configuration=configuration;
		JFrame frame = new JFrame("Grille");
		frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
		frame.getContentPane().setLayout(new BorderLayout());
		frame.getContentPane().add(new TestPane(),BorderLayout.EAST);
		frame.getContentPane().add(new Keys(),BorderLayout.WEST);
		frame.pack();
		frame.setLocationRelativeTo(null);
		frame.setVisible(true);
	}

private void EmplacementAjout (Point p , String Emplacement) {
	boolean contains = (configuration.Emplac_Obstacle.contains(p) || configuration.Emplac_Sac.contains(p) 
			|| configuration.Emplac_Sortie.contains(p) || configuration.Emplac_Robots.contains(p) 
			|| configuration.Emplac_Intrus.contains(p));
	if(contains)
	{
		JOptionPane.showMessageDialog(null, "L'emplacement choisi existe déja ! ");
	}else
	{
		switch (Emplacement)
		{
		case "Obstacle":
			configuration.Emplac_Obstacle.add(p);break;
		case "Sac":
			configuration.Emplac_Sac.add(p);break;
		case "Sortie":
			if (p.x ==1 || p.x == configuration.nbre_colonne || p.y == 1 || p.y == configuration.nbre_ligne)
			{
				configuration.Emplac_Sortie.add(p);break;
			}
			JOptionPane.showMessageDialog(null, "Une sortie doit être au bord de la grille  !");break;									
		case "Robots":
			if (configuration.Emplac_Robots.size() <=4)
			{
				configuration.Emplac_Robots.add(p);break;
			}else JOptionPane.showMessageDialog(null, "Le nombre de robots ne dépasse pas 4 !");break;
			
		case "Intrus":
			if (configuration.Emplac_Intrus.size() <=4)
			{
				configuration.Emplac_Intrus.add(p);break;
			}else JOptionPane.showMessageDialog(null, "Le nombre d'intrus ne dépasse pas 4 !");break;
		default: break;
			
		}
	}
	
}

private class Keys extends JPanel {

	public Keys() {
		
		JLabel lblNewLabel = new JLabel("Sortie");
		lblNewLabel.setFont(new Font("Tahoma", Font.BOLD, 14));
		lblNewLabel.setForeground(Color.GREEN);
		lblNewLabel.setIcon(null);
		lblNewLabel.setBackground(Color.GREEN);
		
		JLabel label = new JLabel("Obstacle");
		label.setFont(new Font("Tahoma", Font.BOLD, 14));
		label.setForeground(Color.BLACK);
		label.setBackground(Color.GREEN);
		
		JLabel lblNewLabel_1 = new JLabel("Sac");
		lblNewLabel_1.setFont(new Font("Tahoma", Font.BOLD, 14));
		lblNewLabel_1.setForeground(Color.ORANGE);
		
		JLabel lblRobot = new JLabel("Robot");
		lblRobot.setForeground(Color.GRAY);
		lblRobot.setFont(new Font("Tahoma", Font.BOLD, 14));
		lblRobot.setBackground(Color.GREEN);
		
		JLabel lblIntrus = new JLabel("Intrus");
		lblIntrus.setForeground(Color.BLUE);
		lblIntrus.setFont(new Font("Tahoma", Font.BOLD, 14));
		lblIntrus.setBackground(Color.GREEN);
		GroupLayout gl_panel = new GroupLayout(this);
		gl_panel.setHorizontalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addContainerGap(16, Short.MAX_VALUE)
					.addGroup(gl_panel.createParallelGroup(Alignment.LEADING)
						.addGroup(Alignment.TRAILING, gl_panel.createParallelGroup(Alignment.LEADING)
							.addComponent(lblNewLabel_1)
							.addComponent(lblNewLabel)
							.addComponent(label))
						.addComponent(lblRobot, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 59, GroupLayout.PREFERRED_SIZE)
						.addComponent(lblIntrus, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 59, GroupLayout.PREFERRED_SIZE))
					.addContainerGap())
		);
		gl_panel.setVerticalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addGap(38)
					.addComponent(label)
					.addGap(18)
					.addComponent(lblNewLabel)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(lblNewLabel_1)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(lblRobot, GroupLayout.PREFERRED_SIZE, 17, GroupLayout.PREFERRED_SIZE)
					.addGap(18)
					.addComponent(lblIntrus, GroupLayout.PREFERRED_SIZE, 17, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(193, Short.MAX_VALUE))
		);
		setLayout(gl_panel);

	}
}
	
	

private  class TestPane extends JPanel {
	public int xOffset =0;
	public int yOffset =0;


	private int columnCount = 0;
	private int rowCount = 0;
	private List<Rectangle> cells;
	private Point selectedCell;
	public TestPane() {
		columnCount=configuration.nbre_ligne;
		rowCount=configuration.nbre_colonne;
	cells = new ArrayList<>(columnCount * rowCount);
	MouseAdapter mouseHandler;
	mouseHandler = new MouseAdapter() {
		@Override
		public void mouseClicked(MouseEvent e) {
				Point point = e.getPoint();
				int width = getWidth();
				int height = getHeight();
				int cellWidth = width / columnCount;
				int cellHeight = height / rowCount;
				selectedCell = null;
				if (e.getX() >= xOffset && e.getY() >= yOffset) {
						int column = (e.getX() - xOffset) / cellWidth;
						int row = (e.getY() - yOffset) / cellHeight;
						if (column >= 0 && row >= 0 && column < columnCount && row < rowCount) {
							selectedCell = new Point(column, row);
						
							Point p = new Point(row+1,column+1);
							EmplacementAjout (p , Emplacement )	;
							
	
	System.out.println(p);
							}
					}
				repaint();
			}
		};
			addMouseListener(mouseHandler);
	}
	public void mouseExited(MouseEvent e) {
		selectedCell = null;
		}
	@Override
	public Dimension getPreferredSize() {
		return new Dimension(columnCount*50, rowCount*50);
		}
	@Override
	public void invalidate() {
		cells.clear();
		selectedCell = null;
		super.invalidate();
		}
	@Override
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		Graphics2D g2d = (Graphics2D) g.create();
		int width = getWidth();
		int height = getHeight();
		int cellWidth = width / columnCount;
		int cellHeight = height / rowCount;
		int xOffset = (width - (columnCount * cellWidth)) / 2;
		int yOffset = (height - (rowCount * cellHeight)) / 2;
		if (cells.isEmpty()) {
			for (int row = 0; row < rowCount; row++) {
				for (int col = 0; col < columnCount; col++) {
					Rectangle cell = new Rectangle(
					xOffset + (col * cellWidth),
					yOffset + (row * cellHeight),
					cellWidth,
					cellHeight);
					cells.add(cell);
					}
				}
			}
		/*if (selectedCell != null) {
			int index = selectedCell.x + (selectedCell.y * columnCount);
			Rectangle cell = cells.get(index);
			g2d.setColor(Color.BLUE);
			g2d.fill(cell);
		}*/
		PaintExistedEmplacement(configuration.Emplac_Sac ,  g2d ,Color.orange);
		PaintExistedEmplacement(configuration.Emplac_Obstacle ,  g2d ,Color.black);
		PaintExistedEmplacement(configuration.Emplac_Sortie ,  g2d ,Color.green);
		PaintExistedEmplacement(configuration.Emplac_Robots ,  g2d ,Color.gray);
		PaintExistedEmplacement(configuration.Emplac_Intrus ,  g2d ,Color.blue);
		
		g2d.setColor(Color.GRAY);
		for (Rectangle cell : cells) {
			g2d.draw(cell);
			}
		g2d.dispose();
		}
	private void PaintExistedEmplacement(Vector<Point> emplac, Graphics2D g2d, Color color) {
		for (int i=0; i <emplac.size();i++)
		{
			Point  p= emplac.get(i);
			int index = (p.y-1) + ((p.x-1) * columnCount);
			Rectangle cell = cells.get(index);
			g2d.setColor(color);
			g2d.fill(cell);
		}
		
	}
	
	}
}